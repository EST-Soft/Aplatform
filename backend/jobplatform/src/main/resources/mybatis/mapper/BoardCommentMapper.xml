<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="jobplatform.fo.board.mapper.BoardCommentMapper">

    <!-- BoardCommentEntity와 데이터베이스 결과 매핑 설정 -->
    <resultMap id="BoardCommentMap" type="jobplatform.fo.board.entity.BoardCommentEntity">
        <id property="cmntSq" column="cmnt_sq"/> <!-- 댓글 ID 매핑 -->
        <result property="mbrSq" column="mbr_sq"/> <!-- 회원 ID 매핑 -->
        <result property="entrprsSq" column="entrprs_sq"/> <!-- 기업 ID 매핑 -->
        <result property="brdSq" column="brd_sq"/> <!-- 게시글 ID 매핑 -->
        <result property="cmntCntnt" column="cmnt_cntnt"/> <!-- 댓글 내용 매핑 -->
        <result property="insrtDtm" column="insrt_dtm"/> <!-- 댓글 작성일 매핑 -->
        <result property="updtDtm" column="updt_dtm"/> <!-- 댓글 수정일 매핑 -->
        <result property="dltDtm" column="dlt_dtm"/> <!-- 댓글 삭제일 매핑 -->
        <result property="dltYn" column="dlt_yn"/> <!-- 댓글 삭제 여부 매핑 -->

        <!-- 회원 정보 매핑 -->
        <association property="member" javaType="jobplatform.fo.user.domain.entity.MemberEntity"
                     column="mbr_sq" select="jobplatform.fo.user.domain.mapper.MypageMapper.findByMbrSq"/>
        <!-- 댓글 작성자에 대한 추가 정보(회원 정보)를 가져오는 쿼리를 설정 -->

        <!-- 기업 정보 매핑 -->
        <association property="entMember" javaType="jobplatform.fo.enterprise.domain.entity.EnterMemberEntity"
                     column="entrprs_sq" select="jobplatform.fo.enterprise.domain.mapper.EnterpriseMypageMapper.findByEntrprsSq"/>
        <!-- 댓글 작성자가 기업인 경우 추가 정보(기업 정보)를 가져오는 쿼리를 설정 -->
    </resultMap>

    <!-- 댓글 삽입 -->
    <insert id="insertOne" parameterType="jobplatform.fo.board.entity.BoardCommentEntity" useGeneratedKeys="true" keyProperty="cmntSq">
        INSERT INTO p3_tbl_board_comment (
        mbr_sq,        <!-- 회원 ID -->
        entrprs_sq,    <!-- 기업 ID -->
        brd_sq,        <!-- 게시글 ID -->
        cmnt_cntnt,    <!-- 댓글 내용 -->
        insrt_dtm,     <!-- 댓글 작성일 -->
        updt_dtm,      <!-- 댓글 수정일 -->
        dlt_dtm,       <!-- 댓글 삭제일 -->
        dlt_yn         <!-- 댓글 삭제 여부 -->
        ) VALUES (
        #{mbrSq},      <!-- 회원 ID 매핑 -->
        #{entrprsSq},  <!-- 기업 ID 매핑 -->
        #{brdSq},      <!-- 게시글 ID 매핑 -->
        #{cmntCntnt},  <!-- 댓글 내용 매핑 -->
        #{insrtDtm},   <!-- 댓글 작성일 매핑 -->
        #{updtDtm},    <!-- 댓글 수정일 매핑 -->
        #{dltDtm},     <!-- 댓글 삭제일 매핑 -->
        #{dltYn}       <!-- 댓글 삭제 여부 매핑 -->
        )
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateOne">
        UPDATE p3_tbl_board_comment
        <set>
            <if test="cmntCntnt != null"> <!-- 댓글 내용이 있을 경우에만 수정 -->
                cmnt_cntnt = #{cmntCntnt},
            </if>
            <if test="updtDtm != null"> <!-- 수정 날짜가 있을 경우에만 수정 -->
                updt_dtm = #{updtDtm},
            </if>
            <if test="dltYn != null"> <!-- 삭제 여부가 있을 경우에만 수정 -->
                dlt_yn = #{dltYn},
            </if>
            <!-- 필요한 다른 필드들 추가 가능 -->
        </set>
        WHERE cmnt_sq = #{cmntSq} <!-- 주어진 댓글 ID에 해당하는 댓글만 수정 -->
    </update>

    <!-- 댓글 삭제 (논리적 삭제 처리) -->
    <delete id="deleteOne">
        UPDATE p3_tbl_board_comment
        SET
        dlt_dtm=NOW(),    <!-- 삭제 일시를 현재 시간으로 설정 -->
        dlt_yn="Y"        <!-- 삭제 여부를 'Y'로 설정 -->
        WHERE
        cmnt_sq=${cmntSq} <!-- 주어진 댓글 ID에 해당하는 댓글만 삭제 -->
    </delete>

    <!-- 특정 게시글의 모든 댓글 조회 -->
    <select id="findAll" resultMap="BoardCommentMap">
        SELECT * FROM p3_tbl_board_comment WHERE brd_sq=#{brdSq} AND dlt_yn="N"
        <!-- 특정 게시글 ID(brd_sq)에 해당하는 모든 댓글을 조회 -->
    </select>

</mapper>
